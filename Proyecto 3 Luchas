import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk
import os
import random

# Constante con las estadísticas
ESTADISTICAS = [
    "Velocidad", "Fuerza", "Inteligencia", "Defensa", "Magia",
    "Telepatía", "Estratega", "Volar", "Elasticidad", "Regeneración"
]

class Luchador:
    def __init__(self, tipo, genero, nombre_real, alter_ego, stats, foto=None):
        self.tipo = tipo
        self.genero = genero
        self.nombre_real = nombre_real
        self.alter_ego = alter_ego
        self.foto = foto
        self.stats = stats
        self.victorias = 0
        self.derrotas = 0
    
    def calcular_poder_total(self):
        return sum(self.stats.values())
    
    def luchar_contra(self, oponente):
        poder_self = self.calcular_poder_total() * random.uniform(0.9, 1.1)
        poder_oponente = oponente.calcular_poder_total() * random.uniform(0.9, 1.1)
        
        if poder_self > poder_oponente:
            self.victorias += 1
            oponente.derrotas += 1
            return (True, f"{self.alter_ego} derrotó a {oponente.alter_ego}!")
        else:
            self.derrotas += 1
            oponente.victorias += 1
            return (False, f"{oponente.alter_ego} derrotó a {self.alter_ego}!")

class CreadorPersonajes:
    def __init__(self, root, callback_guardar):
        self.root = root
        self.root.title("Crear Personaje")
        self.root.geometry("800x600")
        self.callback_guardar = callback_guardar
        
        self.tipo_var = tk.StringVar(value="Héroe")
        self.genero_var = tk.StringVar(value="Hombre")
        self.nombre_real_var = tk.StringVar()
        self.alter_ego_var = tk.StringVar()
        self.stats_vars = {stat: tk.IntVar(value=0) for stat in ESTADISTICAS}
        self.total_var = tk.StringVar(value="Total: 0")
        self.icono_path = None
        
        self.crear_interfaz()

    def crear_interfaz(self):
        main_frame = tk.Frame(self.root, padx=20, pady=20)
        main_frame.pack(expand=True, fill=tk.BOTH)
        
        # Frame para el icono
        icon_frame = tk.Frame(main_frame, width=150, height=150, bd=2, relief="solid")
        icon_frame.pack_propagate(False)
        icon_frame.pack(side=tk.LEFT, padx=10, pady=10)
        
        self.lbl_icono = tk.Label(icon_frame)
        self.lbl_icono.pack(expand=True, fill=tk.BOTH)
        
        self.btn_icono = tk.Button(
            icon_frame, 
            text="Seleccionar Icono", 
            command=self.seleccionar_icono,
            height=1, 
            width=15
        )
        self.btn_icono.pack(pady=5)
        
        # Frame para datos básicos
        left_frame = tk.Frame(main_frame)
        left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10)
        
        tk.Label(left_frame, text="Datos Básicos", font=("Arial", 12, "bold")).pack(pady=10)
        
        tk.Label(left_frame, text="Tipo:").pack(anchor=tk.W)
        ttk.Combobox(
            left_frame, 
            textvariable=self.tipo_var, 
            values=["Héroe", "Villano"], 
            state="readonly"
        ).pack(fill=tk.X, pady=5)
        
        tk.Label(left_frame, text="Género:").pack(anchor=tk.W)
        ttk.Combobox(
            left_frame, 
            textvariable=self.genero_var, 
            values=["Hombre", "Mujer", "No determinado"], 
            state="readonly"
        ).pack(fill=tk.X, pady=5)
        
        tk.Label(left_frame, text="Nombre Real:").pack(anchor=tk.W)
        tk.Entry(left_frame, textvariable=self.nombre_real_var).pack(fill=tk.X, pady=5)
        
        tk.Label(left_frame, text="Alter Ego:").pack(anchor=tk.W)
        tk.Entry(left_frame, textvariable=self.alter_ego_var).pack(fill=tk.X, pady=5)
        
        # Frame para estadísticas
        right_frame = tk.Frame(main_frame)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10)
        
        tk.Label(right_frame, text="Estadísticas", font=("Arial", 12, "bold")).pack(pady=10)
        
        for stat in ESTADISTICAS:
            frame_stat = tk.Frame(right_frame)
            frame_stat.pack(fill=tk.X, pady=2)
            
            tk.Label(frame_stat, text=f"{stat}:", width=12, anchor=tk.W).pack(side=tk.LEFT)
            
            tk.Scale(
                frame_stat, 
                from_=0, 
                to=100, 
                orient=tk.HORIZONTAL, 
                variable=self.stats_vars[stat], 
                command=self.actualizar_total,
                length=200
            ).pack(side=tk.LEFT, expand=True, fill=tk.X)
            
            tk.Label(frame_stat, textvariable=self.stats_vars[stat], width=3).pack(side=tk.LEFT)
        
        self.btn_guardar = tk.Button(
            right_frame, 
            text="CREAR PERSONAJE", 
            command=self.guardar_personaje,
            bg="#4CAF50",
            fg="white", 
            font=("Arial", 10, "bold"),
            height=1, 
            width=15
        )
        self.btn_guardar.pack(pady=10)

    def actualizar_total(self, _=None):
        total = sum(var.get() for var in self.stats_vars.values())
        self.total_var.set(f"Total: {total}")

    def seleccionar_icono(self):
        iconos_dir = "ICONOS"
        if not os.path.exists(iconos_dir):
            os.makedirs(iconos_dir)
            messagebox.showinfo("Info", "Carpeta ICONOS creada. Agregue imágenes PNG.")
            return
        
        iconos = [f for f in os.listdir(iconos_dir) if f.lower().endswith('.png')]
        if not iconos:
            messagebox.showwarning("Error", "No hay iconos en la carpeta ICONOS")
            return
        
        top = tk.Toplevel(self.root)
        top.title("Seleccionar Icono")
        top.geometry("600x500")
        
        canvas = tk.Canvas(top)
        scrollbar = tk.Scrollbar(top, orient="vertical", command=canvas.yview)
        frame = tk.Frame(canvas)
        
        canvas.configure(yscrollcommand=scrollbar.set)
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        canvas.create_window((0, 0), window=frame, anchor="nw")
        frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        
        cols = 4
        for i, icono in enumerate(iconos):
            img_path = os.path.join(iconos_dir, icono)
            try:
                img = Image.open(img_path)
                img.thumbnail((120, 120))
                photo = ImageTk.PhotoImage(img)
                
                btn = tk.Button(frame, image=photo, 
                              command=lambda p=img_path: self.seleccionar_icono_callback(p, top))
                btn.image = photo
                btn.grid(row=i//cols, column=i%cols, padx=5, pady=5)
            except Exception as e:
                print(f"Error cargando icono: {e}")

    def seleccionar_icono_callback(self, path, top):
        self.icono_path = path
        try:
            img = Image.open(path)
            img = img.resize((200, 200), Image.Resampling.LANCZOS)
            photo = ImageTk.PhotoImage(img)
            self.lbl_icono.config(image=photo)
            self.lbl_icono.image = photo
            top.destroy()
        except Exception as e:
            messagebox.showerror("Error", f"No se pudo cargar el icono: {e}")

    def guardar_personaje(self):
        alter_ego = self.alter_ego_var.get().strip()
        if not alter_ego:
            messagebox.showwarning("Error", "¡El Alter Ego no puede estar vacío!")
            return
            
        if self.nombre_existe(alter_ego):
            messagebox.showerror("Error", "Este Alter Ego ya existe. Usa otro nombre.")
            return
        
        if not all([self.nombre_real_var.get(), alter_ego, self.icono_path]):
            messagebox.showwarning("Error", "Complete todos los campos y selecciona un icono.")
            return
        
        tipo = "H" if self.tipo_var.get() == "Héroe" else "V"
        genero = self.genero_var.get()[0]
        nombre_real = self.nombre_real_var.get()
        stats = {k: v.get() for k, v in self.stats_vars.items()}
        
        with open("personajes.txt", "a") as f:
            stats_str = ",".join(str(stats[k]) for k in ESTADISTICAS)
            f.write(f"{tipo},{genero},{nombre_real},{alter_ego},{stats_str}\n")
        
        iconos_pj_dir = "ICONOS_PERSONAJES"
        if not os.path.exists(iconos_pj_dir):
            os.makedirs(iconos_pj_dir)
        
        try:
            with Image.open(self.icono_path) as img:
                img.save(os.path.join(iconos_pj_dir, f"{alter_ego}.png"))
        except Exception as e:
            messagebox.showwarning("Advertencia", f"No se pudo guardar el icono: {e}")
        
        messagebox.showinfo("Éxito", "Personaje creado correctamente!")
        self.callback_guardar()
        self.root.destroy()

    def nombre_existe(self, alter_ego):
        if not os.path.exists("personajes.txt"):
            return False
            
        with open("personajes.txt", "r") as f:
            for linea in f:
                datos = linea.strip().split(",")
                if len(datos) > 3 and datos[3].lower() == alter_ego.lower():
                    return True
        return False

class SistemaTorneos:
    def __init__(self, root):
        self.root = root
        self.root.title("Sistema de Torneos")
        self.root.geometry("800x600")
        self.personajes = self.cargar_personajes()
        self.torneos = []
        self.mostrar_menu_principal()
    
    def cargar_personajes(self):
        personajes = []
        if os.path.exists("personajes.txt"):
            with open("personajes.txt", "r") as f:
                for linea in f:
                    datos = linea.strip().split(",")
                    if len(datos) >= 14:
                        stats = {k: int(v) for k, v in zip(ESTADISTICAS, datos[4:14])}
                        personajes.append(Luchador(
                            tipo="Héroe" if datos[0] == "H" else "Villano",
                            genero={"H": "Hombre", "M": "Mujer", "N": "No determinado"}.get(datos[1], "No determinado"),
                            nombre_real=datos[2],
                            alter_ego=datos[3],
                            stats=stats,
                            foto=os.path.join("ICONOS_PERSONAJES", f"{datos[3]}.png") if os.path.exists(os.path.join("ICONOS_PERSONAJES", f"{datos[3]}.png")) else None
                        ))
        return personajes
    
    def mostrar_menu_principal(self):
        for widget in self.root.winfo_children():
            widget.destroy()
        
        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(expand=True)
        
        tk.Label(frame, text="MENÚ PRINCIPAL", font=("Arial", 16, "bold")).pack(pady=20)
        
        opciones = [
            ("1. Crear Personajes", self.menu_personajes),
            ("2. Torneos", lambda: None),
            ("3. Jugar Torneo", self.opciones_torneo),
            ("4. Estadísticas", lambda: None)
        ]
        
        for texto, comando in opciones:
            tk.Button(
                frame,
                text=texto,
                command=comando,
                width=25,
                height=2
            ).pack(pady=10)

    def opciones_torneo(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(expand=True)

        tk.Label(frame, text="Seleccione una Opción", font=("Arial", 16, "bold")).pack(pady=20)

        tk.Button(
            frame,
            text="Crear Torneo",
            command=self.mostrar_menu_principal,
            width=25,
            height=2,
        ).pack(pady=10)

        tk.Button(
            frame,
            text="Seleccionar Torneo",
            command=self.mostrar_menu_principal,
            width=25,
            height=2,
        ).pack(pady=10)

        tk.Button(
            frame,
            text="Regresar",
            command=self.mostrar_menu_principal,
            width=25,
            height=2,
        ).pack(pady=20)

    def menu_personajes(self):
        for widget in self.root.winfo_children():
            widget.destroy()
        
        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(expand=True)
        
        tk.Label(frame, text="GESTIÓN DE PERSONAJES", font=("Arial", 16, "bold")).pack(pady=20)
        
        tk.Button(
            frame,
            text="Crear Nuevo Personaje",
            command=self.abrir_creador_personajes,
            width=25,
            height=2
        ).pack(pady=10)
        
        tk.Button(
            frame,
            text="Listar Personajes",
            command=self.listar_personajes,
            width=25,
            height=2
        ).pack(pady=10)
        
        tk.Button(
            frame,
            text="Eliminar Personaje",
            command=self.mostrar_pantalla_borrado,
            width=25,
            height=2,
            bg="#ff4444",
            fg="white"
        ).pack(pady=10)
        
        tk.Button(
            frame,
            text="Volver al Menú Principal",
            command=self.mostrar_menu_principal,
            width=25,
            height=2
        ).pack(pady=20)

    def abrir_creador_personajes(self):
        top = tk.Toplevel(self.root)
        CreadorPersonajes(top, self.actualizar_personajes)

    def actualizar_personajes(self):
        self.personajes = self.cargar_personajes()
    
    def listar_personajes(self):
        top = tk.Toplevel(self.root)
        top.title("Lista de Personajes")
        top.geometry("900x600")
        
        main_frame = tk.Frame(top)
        main_frame.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)
        
        list_frame = tk.Frame(main_frame, width=200)
        list_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        detail_frame = tk.Frame(main_frame, bd=2, relief="groove")
        detail_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10)
        
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.personajes_listbox = tk.Listbox(
            list_frame, 
            yscrollcommand=scrollbar.set,
            font=("Arial", 10),
            width=25
        )
        self.personajes_listbox.pack(expand=True, fill=tk.BOTH)
        scrollbar.config(command=self.personajes_listbox.yview)
        
        self.detail_icon = tk.Label(detail_frame, width=150, height=150, bd=2, relief="solid")
        self.detail_icon.pack(pady=10)
        
        self.detail_text = tk.Text(
            detail_frame, 
            wrap=tk.WORD, 
            font=("Arial", 10),
            height=20,
            state="disabled"
        )
        self.detail_text.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)
        
        for p in self.personajes:
            self.personajes_listbox.insert(tk.END, p.alter_ego)
        
        self.personajes_listbox.bind("<<ListboxSelect>>", self.mostrar_detalle_personaje)

    def mostrar_detalle_personaje(self, event):
        selection = self.personajes_listbox.curselection()
        if not selection:
            return
        
        index = selection[0]
        personaje = self.personajes[index]
        
        if personaje.foto and os.path.exists(personaje.foto):
            try:
                img = Image.open(personaje.foto)
                img = img.resize((150, 150), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(img)
                self.detail_icon.config(image=photo)
                self.detail_icon.image = photo
            except Exception as e:
                self.detail_icon.config(image='', text="Icono no disponible")
        else:
            self.detail_icon.config(image='', text="Sin icono")
        
        self.detail_text.config(state="normal")
        self.detail_text.delete(1.0, tk.END)
        
        detalles = (
            f"Alter Ego: {personaje.alter_ego}\n"
            f"Tipo: {personaje.tipo}\n"
            f"Género: {personaje.genero}\n"
            f"Nombre Real: {personaje.nombre_real}\n\n"
            "ESTADÍSTICAS:\n"
        )
        for stat in ESTADISTICAS:
            detalles += f"- {stat}: {personaje.stats[stat]}\n"
        
        self.detail_text.insert(tk.END, detalles)
        self.detail_text.config(state="disabled")

    def mostrar_pantalla_borrado(self):
        """Pantalla especial para eliminar personajes"""
        top = tk.Toplevel(self.root)
        top.title("Eliminar Personaje")
        top.geometry("900x600")
        
        main_frame = tk.Frame(top, padx=20, pady=20)
        main_frame.pack(expand=True, fill=tk.BOTH)
        
        tk.Label(
            main_frame, 
            text="SELECCIONE EL PERSONAJE A ELIMINAR", 
            font=("Arial", 14, "bold"),
            fg="red"
        ).pack(pady=10)
        
        list_frame = tk.Frame(main_frame)
        list_frame.pack(fill=tk.BOTH, expand=True)
        
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.lista_borrado = tk.Listbox(
            list_frame,
            yscrollcommand=scrollbar.set,
            font=("Arial", 12),
            selectmode=tk.SINGLE
        )
        self.lista_borrado.pack(fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.lista_borrado.yview)
        
        for p in self.personajes:
            self.lista_borrado.insert(tk.END, f"{p.alter_ego} ({p.tipo})")
        
        btn_frame = tk.Frame(main_frame)
        btn_frame.pack(pady=20)
        
        tk.Button(
            btn_frame,
            text="ELIMINAR SELECCIONADO",
            command=lambda: self.confirmar_borrado(top),
            bg="#ff4444",
            fg="white",
            font=("Arial", 12, "bold"),
            padx=20,
            pady=10
        ).pack(side=tk.LEFT, padx=10)
        
        tk.Button(
            btn_frame,
            text="CANCELAR",
            command=top.destroy,
            bg="#cccccc",
            font=("Arial", 12),
            padx=20,
            pady=10
        ).pack(side=tk.LEFT, padx=10)

    def confirmar_borrado(self, top):
        """Confirma y ejecuta el borrado del personaje seleccionado"""
        seleccion = self.lista_borrado.curselection()
        if not seleccion:
            messagebox.showwarning("Advertencia", "Selecciona un personaje primero")
            return
        
        index = seleccion[0]
        personaje = self.personajes[index]
        
        confirmacion = messagebox.askyesno(
            "Confirmar borrado",
            f"¿Estás seguro de querer eliminar a {personaje.alter_ego}?\nEsta acción no se puede deshacer.",
            icon="warning"
        )
        
        if confirmacion:
            try:
                # Eliminar del archivo
                if os.path.exists("personajes.txt"):
                    with open("personajes.txt", "r") as f:
                        lineas = f.readlines()
                    
                    with open("personajes.txt", "w") as f:
                        for linea in lineas:
                            datos = linea.strip().split(",")
                            if len(datos) > 3 and datos[3].lower() != personaje.alter_ego.lower():
                                f.write(linea)
                
                # Actualizar lista
                self.actualizar_personajes()
                messagebox.showinfo("Éxito", f"{personaje.alter_ego} fue eliminado")
                top.destroy()
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo eliminar: {str(e)}")

            
#===================#
#Nombre: Inicio_Sesion
#===================#
#atributos:
#root (ventana tkinter)
#frame (Frame)
#usuario_entry (Entry)
#contra_entry (Entry)

#===================#
#métodos:
#__init__(root)
#crear_archivo_por_defecto()
#crear_widgets_login()
#validar_login()
#mostrar_bienvenida(nombre)
#abrir_sistema_torneos()
#===================#            
class Inicio_Sesion:
    """Clase que maneja el sistema de login y registro de usuarios."""
    
    def __init__(self, root):
        """
        Inicializa la ventana de login.
        
        Args:
            root (tk.Tk): Ventana principal
        """
        self.root = root
        self.root.title("Sistema de Login")
        self.root.geometry("400x300")
        
        if not os.path.exists("contraseñas.txt"):
            self.crear_archivo_por_defecto()
        
        self.crear_widgets_login()
    
    def crear_archivo_por_defecto(self):
        """Crea el archivo de contraseñas con usuarios por defecto."""
        with open("contraseñas.txt", "w", encoding="utf-8") as f:
            f.write("Sebas,Seb,1234\n")
            f.write("Hackney Hac,1234\n")
            f.write("admin,admin,admin\n")
    
    def crear_widgets_login(self):
        """Crea los widgets de la interfaz de login."""
        for widget in self.root.winfo_children():
            widget.destroy()
        
        self.frame = tk.Frame(self.root, padx=20, pady=20)
        self.frame.pack(expand=True)
        
        tk.Label(self.frame, text="INICIO DE SESIÓN", font=("Arial", 14, "bold")).grid(row=0, columnspan=2, pady=10)
        
        tk.Label(self.frame, text="Usuario:").grid(row=1, column=0, sticky="w", pady=5)
        self.usuario_entry = tk.Entry(self.frame)
        self.usuario_entry.grid(row=1, column=1, pady=5)
        
        tk.Label(self.frame, text="Contraseña:").grid(row=2, column=0, sticky="w", pady=5)
        self.contra_entry = tk.Entry(self.frame, show="*")
        self.contra_entry.grid(row=2, column=1, pady=5)
        
        tk.Button(self.frame, text="Ingresar", command=self.validar_login).grid(row=3, columnspan=2, pady=10)
    
    def validar_login(self):
        """Valida las credenciales ingresadas por el usuario."""
        usuario = self.usuario_entry.get()
        contra = self.contra_entry.get()
        
        if not usuario or not contra:
            messagebox.showwarning("Error", "Debe ingresar usuario y contraseña")
            return
        
        with open("contraseñas.txt", "r", encoding="utf-8") as f:
            for linea in f:
                datos = linea.strip().split(",")
                if len(datos) == 3:
                    nombre, user, password = datos
                    if user == usuario and password == contra:
                        self.mostrar_bienvenida(nombre)
                        return
        
        messagebox.showerror("Error", "Usuario o contraseña incorrectos")
    
    def mostrar_bienvenida(self, nombre):
        """Muestra la pantalla de bienvenida después del login."""
        for widget in self.root.winfo_children():
            widget.destroy()
        
        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(expand=True)
        
        tk.Label(
            frame, 
            text=f"¡Bienvenido/a {nombre}!", 
            font=("Arial", 16, "bold"),
            fg="blue"
        ).pack(pady=20)
        
        tk.Button(
            frame,
            text="Continuar al Menú Principal",
            command=self.abrir_sistema_torneos,
            width=20,
            height=2
        ).pack(pady=20)
    
    def abrir_sistema_torneos(self):
        """Inicia el sistema principal de torneos."""
        for widget in self.root.winfo_children():
            widget.destroy()
        
        SistemaTorneos(self.root)


#===================#
#Nombre: Lucha
#===================#
#atributos:
#nombre_alter_primero
#nombre_alter_segundo
#nombre_torneo
#ganador_round_1
#ganador_round_2
#ganador_round_3
#ganador_lucha

#===================#
#metodos:
#registrar_ganador(round_num,ganador)
#realizar_lucha()
#determinar_ganador()
#===================#


class Lucha:
    def __init__(self,primer_luchador,segundo_luchador,nombre_torneo=None):
        if not isinstance(primer_luchador,Luchador) or not isinstance(segundo_luchador,Luchador):
            raise ValueError("Los nombres de los alter ego deben ser Luchadores")
        self.primer_luchador=primer_luchador
        self.segundo_luchador=segundo_luchador
        self.ganador_round_1=None
        self.ganador_round_2=None
        self.ganador_round_3=None
        self.ganador_lucha=None
        self.nombre_torneo=nombre_torneo or "Sin Torneo"
    def registrar_ganador(self,round_num,ganador):
        if round_num == 1:
            self.ganador_round_1=ganador
        if round_num == 2:
            self.ganador_round_2=ganador
        if round_num == 3:
            self.ganador_round_3=ganador

        with open ("Luchas.txt","a") as archivo:
            archivo.write(self.primer_luchador.alter_ego + "," +self.segundo_luchador.alter_ego + "," +
                          "#"+ str(round_num)+"," + ganador+","+ self.nombre_torneo + "\n")
    def realizar_lucha(self):
        for round_num in range(1,4):
            stats_elegidos =random.sample(list(self.primer_luchador.stats.keys()),8)

            victorias_peleador1=0
            victorias_peleador2=0
            
            for stat in stats_elegidos:

                valor_peleador1=self.primer_luchador.stats.get(stat,0)
                valor_peleador2=self.segundo_luchador.stats.get(stat,0)

                if valor_peleador1 > valor_peleador2:
                    victorias_peleador1 +=1

                if valor_peleador2 > valor_peleador1:
                    victorias_peleador2 +=1
                    
            if victorias_peleador1 > victorias_peleador2:
                self.registrar_ganador(round_num,self.primer_luchador.alter_ego)
            
            if victorias_peleador2 > victorias_peleador1:
                self.registrar_ganador(round_num,self.segundo_luchador.alter_ego)

        self.determinar_ganador()

    def determinar_ganador(self):
        primero_victorias= 0
        segundo_victorias=0

        for ganador in[self.ganador_round_1,self.ganador_round_2,self.ganador_round_3]:
            
            if ganador == self.primer_luchador.alter_ego:
                primero_victorias +=1
            elif ganador == self.segundo_luchador.alter_ego:
                segundo_victorias +=1
        if primero_victorias > segundo_victorias:
            self.ganador_lucha = self.primer_luchador.alter_ego
            
        elif segundo_victorias > primero_victorias:
            self.ganador_lucha = self.segundo_luchador.alter_ego
        else:
            self.ganador_lucha ="Empate"



# Punto de entrada principal
if __name__ == "__main__":
    root = tk.Tk()
    sesion = Inicio_Sesion(root)
    root.mainloop()
